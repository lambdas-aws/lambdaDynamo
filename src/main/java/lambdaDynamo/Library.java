/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lambdaDynamo;


import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.LambdaLogger;

import java.util.HashMap;
import java.util.List;


public class Library {
    private DynamoDB dynamoDb;
    private String DYNAMODB_TABLE_NAME = "task";
    private Regions REGION = Regions.US_WEST_2;

    public boolean logMe(Context context) {
        LambdaLogger logger = context.getLogger();
        logger.log("This has been logged: " + context.toString());
        return true;
    }

    public Task save(Task task) {

        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);

        Task t = new Task(task.getId(), task.getTitle(),
                task.getDescription(), task.getAssignee(),
                task.getHistoryList(), task.getUrl());

        ddbMapper.save(t);

        return task;
    }

    public List<Task> getAllTasks(){

        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);

        List<Task> tasks = ddbMapper.scan(Task.class, new DynamoDBScanExpression());

        return tasks;
    }

    public List<Task> getUserTasks(Task task){
        HashMap<String, AttributeValue> eav = new HashMap<>();
        eav.put(":v1", new AttributeValue().withS(task.getAssignee()));
        DynamoDBScanExpression scan = new DynamoDBScanExpression()
                .withFilterExpression("(assignee = :v1)")
                .withExpressionAttributeValues(eav);
        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);
        List<Task> tasks = ddbMapper.scan(Task.class, scan);

        return tasks;

    }

    public Task deleteTask(Task task){
        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);

        Task t = ddbMapper.load(Task.class, task.getId());

        ddbMapper.delete(t);

        return task;
    }


}



